This tutorial demonstrates 
1) How to initialiase your node project
2) Anlaysing the package.json file which is the configuration file for your project
3) Modify the package.json file to include a start scripts
4) Install development dependencies
5) Install production dependencies
6) Use nodemon to automatically restart your server whenever you make changes
7) Use of express middleware and chaining of middlewares
npm scripts to create a configuration file for your project

0) Start with a simple app.js file with the following contents
const http = require('http');
console.log("Hello world");


1) npm init
will generate the package.json file which is a configuration file for your project
{
  "name": "1demo",
  "version": "1.0.0",
  "main": "app.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Anand Veeraswamy",
  "license": "ISC",
  "description": ""
}

2) 
Add "start": "node app.js" in the scripts section as shown below:
{
  "name": "1demo",
  "version": "1.0.0",
  "main": "app.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
	"start": "node app.js" // added this line
  },
  "author": "Anand Veeraswamy",
  "license": "ISC",
  "description": ""
}

3) run "npm install --save express" in the terminal to install express as a production dependency. This will add express as a production dependency in the packages.json file as shown below:
{
  "name": "1demo",
  "version": "1.0.0",
  "main": "app.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node app.js"
  },
  "author": "Anand Veeraswamy",
  "license": "ISC",
  "description": "",
  "dependencies": { // this was added 
    "express": "^4.21.2"
  }
}

4) Demonstrate the import and basic use of Express
Update the app.js file with the following contents
const http = require('http');

const express = require('express'); // import express

const app = express(); // store express in a const by calling the express as a function

const server = http.createServer(app); // pass app as the paramete to the createServer function

server.listen(3000);

5) (Optional) Install a development dependency nodemon to automatically restart the server when you make changes to your code by running the following command on the terminal: npm install nodemon --save-dev

Replace "start": "node app.js" with "start": "nodemon app.js"
We are now using nodemon to start our server not node

Note: Codespace automatically saves your files and will keep restarting the server whenever you make any changes to the app.js file.

this should change the packages.json file as shown below:
{
  "name": "1demo",
  "version": "1.0.0",
  "main": "app.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node app.js"
  },
  "author": "Anand Veeraswamy",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "express": "^4.21.2"
  },
  "devDependencies": {
    "nodemon": "^3.1.9"
  }
}

6) Update app.js as shown below and start the server. The website will not load but in the console you should see the message 'In the middleware!'
https://expressjs.com/en/5x/api.html#app.use
const http = require('http');

const express = require('express'); // import express

const app = express(); // store express in a const by calling the express as a function

app.use((req, res, next) => {
    console.log('In the middleware!');
});

const server = http.createServer(app); // pass app as the paramete to the createServer function

server.listen(3004);

7) Add another app.use with another message and restart the server. You will only see 'In the middleware!'. You will not see 'In another middleware'! Why?

const http = require('http');

const express = require('express'); // import express

const app = express(); // store express in a const by calling the express as a function

app.use((req, res, next) => {
    console.log('In the middleware!');
});

app.use((req, res, next) => {
    console.log('In another middleware');
});

const server = http.createServer(app); // pass app as the paramete to the createServer function

server.listen(3004);

8) Add 'next()' in the first app.use function. And now you should see both "In the middleware" and "In another middleware!"
const http = require('http');

const express = require('express'); // import express

const app = express(); // store express in a const by calling the express as a function

app.use((req, res, next) => {
    console.log("In the middleware");
    next();
});

app.use((req, res, next) => {
    console.log("In another middleware!");
})
const server = http.createServer(app); // pass app as the paramete to the createServer function

server.listen(3007);
